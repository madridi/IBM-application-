package switchparsing;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import static java.lang.Float.parseFloat;
import static java.lang.System.exit;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.xml.bind.DatatypeConverter.parseInteger;
import org.jfree.data.xy.XYSeries;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DALI
 */
public class Accueil extends javax.swing.JFrame {
 ArrayList<Port3> lesport3=new ArrayList<Port3>();
 int pas;
 public String date;
    /**
     * Creates new form Accueil
     */
    public Accueil() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        jFileChooser1.setBackground(Color.red);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        RX = new javax.swing.JCheckBox();
        TX = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setBackground(new java.awt.Color(255, 255, 255));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\DALI\\Desktop\\projet IBM\\IBM-cmyk_small(1).png")); // NOI18N

        jButton3.setText("Port Performance");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Total Performance");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        RX.setText("RX");

        TX.setText("TX");

        jLabel3.setText("Ports");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RX)
                    .addComponent(TX))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RX)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TX)
                            .addComponent(jButton4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
     try{
        File f= jFileChooser1.getSelectedFile();
       String home = System.getProperty("user.dir" );
       
        lesport3 = parsing(f,home);
        
        perf_Info(lesport3);
        
       for(int i=0;i<lesport3.size();i++){
           jComboBox2.addItem(lesport3.get(i).getNum());
       }
     }catch(Exception ex){
         JOptionPane.showMessageDialog(null, ex);
     }
     
    
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    
    
    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 try{
        String numPort=(String)jComboBox2.getSelectedItem(); 
        
        Port3 portselected=null;
        for(int i=0;i<lesport3.size();i++){
            if(lesport3.get(i).getNum().equals(numPort)){
                portselected=lesport3.get(i);
            }
        }
        XYSeries series = new XYSeries("pas = "+pas+"s");
        
        if((RX.isSelected())&&(TX.isSelected())){
              for(int i=0;i<portselected.getRx().size();i++){
            series.add(i*pas,(((float)portselected.getRx().get(i))+(float)portselected.getTx().get(i)));
              }
             MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport=numPort;
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
                
        }
        
        else if(RX.isSelected()) {
                for(int i=0;i<portselected.getRx().size();i++){
            series.add(i*pas,(float)portselected.getRx().get(i));
                }
            MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport=numPort;
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
        
             }else if(TX.isSelected()){
                  for(int i=0;i<portselected.getTx().size();i++){
            series.add(i*pas,(float)portselected.getTx().get(i));
                  }
            MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport=numPort;
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
        
             }else {
                  JOptionPane.showMessageDialog(null, "choose RX or TX or both");
             }
       
        
        
 }catch(Exception ex){
     JOptionPane.showMessageDialog(null, ex);
 }
        /*String numPort=(String)jComboBox2.getSelectedItem(); 
        
Port3 portselected=null;
 for(int i=0;i<lesport3.size();i++){
     if(lesport3.get(i).getNum().equals(numPort)){
         portselected=lesport3.get(i);
     }
 }
  
        System.err.println(portselected.getNum());
        
        XYSeries series = new XYSeries("Debit");
        
for(int i=0;i<portselected.getRx().size();i++){
    series.add((float)i,(float)portselected.getRx().get(i));
}

        MouseMarkerDemo demo = new MouseMarkerDemo("JFreeChart: MouseMarkerDemo.java");
        MouseMarkerDemo.series1=series;
        demo.pack();
        demo.setVisible(true);*/
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try{
        Port3 porttotal=new Port3("total");
         XYSeries series = new XYSeries("pas = "+pas+"s");
            if((RX.isSelected())&&(TX.isSelected())){
          
                        for(int j=0;j<lesport3.get(0).getRx().size();j++){
                     porttotal.getRx().add((float)0);
                       for(int i=0;i<lesport3.size();i++){

                          porttotal.getRx().set(j, (porttotal.getRx().get(j))+(lesport3.get(i).getRx().get(j)));
                      }
                  }

                        for(int j=0;j<lesport3.get(0).getTx().size();j++){
                     porttotal.getTx().add((float)0);
                       for(int i=0;i<lesport3.size();i++){

                          porttotal.getTx().set(j, (porttotal.getTx().get(j))+(lesport3.get(i).getTx().get(j)));
                      }
                  }
                
                         for(int i=0;i<porttotal.getRx().size();i++){
                               series.add(i*pas,(float)(porttotal.getRx().get(i)+porttotal.getTx().get(i)));
                         }
                         MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport="Total";
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
        
            }else if(RX.isSelected()){
                for(int j=0;j<lesport3.get(0).getRx().size();j++){
              porttotal.getRx().add((float)0);
                for(int i=0;i<lesport3.size();i++){
                    
                   porttotal.getRx().set(j, (porttotal.getRx().get(j))+(lesport3.get(i).getRx().get(j)));
               }
           }
          for(int i=0;i<porttotal.getRx().size();i++){
            series.add(i*pas,(float)porttotal.getRx().get(i));
                  }
          
          MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport="Total";
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
        
            }else if(TX.isSelected()){
                for(int j=0;j<lesport3.get(0).getTx().size();j++){
              porttotal.getTx().add((float)0);
                for(int i=0;i<lesport3.size();i++){
                    
                   porttotal.getTx().set(j, (porttotal.getTx().get(j))+(lesport3.get(i).getTx().get(j)));
               }
           }
          for(int i=0;i<porttotal.getTx().size();i++){
            series.add(i*pas,(float)porttotal.getTx().get(i));
                  }
                
          MouseMarkerDemo.series1=series;
        MouseMarkerDemo.date=date;
        MouseMarkerDemo.numport="Total";
        
        MouseMarkerDemo demo = new MouseMarkerDemo("Switch Performance");
    
        demo.pack();
        demo.setVisible(true);
        
            }else{
                JOptionPane.showMessageDialog(null, "choose RX or TX or both");
            }
             
        }catch(Exception ex){
     JOptionPane.showMessageDialog(null, ex);
 }
    }//GEN-LAST:event_jButton4ActionPerformed

    
    
    
    ////////////////
    
    
    public ArrayList<Port3> parsing(File f,String home){
        ArrayList<Port3> lesport3=new ArrayList<Port3>();
        
        
         try{
	
	 String chaine = "";  //initialisation des variables
	 String ligne;
	 InputStream ips=new FileInputStream(f.getAbsoluteFile()); //déclarations des objets de lecture
	 InputStreamReader ipsr=new InputStreamReader(ips);
	 BufferedReader br=new BufferedReader(ipsr);
	ArrayList<Area> zones=new ArrayList<Area>();
        Boolean partiezone=false,trouver=false;
        Area zoneact=new Area();
        String nommembre;
        String nomzone;
        Member membre;
        Area zone;
        String nomalias;
        Alias alias;
        ArrayList<Alias> lesalias=new ArrayList<Alias>();
        FileWriter sortie2 = new FileWriter(home+"\\Configuration_Zone.csv");
         FileWriter sortie3 = new FileWriter(home+"\\Liste_Alias.csv");
       
         try (FileWriter sortie = new FileWriter(home+"\\Liste_Zone.log")) {
            
             
             while ((ligne=br.readLine())!=null){  //tant qu'il y a des lignes
                 if(ligne.contains("cfg:"))
                     break;
                 
             }
             
             while ((ligne=br.readLine())!=null){
                 
                 
                if(ligne.contains("zone:"))
                 {
                         String[] lignezone=ligne.split(":");
                         nomzone=lignezone[1].trim();
                         zone=new Area(nomzone);
                        zones.add(zone);
                  
                         
                     break;
                 }
                 
                 String[] leszones=ligne.split(" ");
                 for(int i=0;i<leszones.length;i++){
                     
                     nomzone=leszones[i].trim();
                     nomzone=nomzone.replace(";", "");
                    
                    
                     sortie.write(nomzone);
                     
                     sortie.write("\r\n");
               
                
                 }
                 
             }
             
          
             
         while ((ligne=br.readLine())!=null){
              
             
             if(ligne.contains("alias:")){
             
                 
                  String[] lignealias=ligne.split(":");
                         nomalias=lignealias[1].trim();
                         alias=new Alias(nomalias);
                        lesalias.add(alias);
                            if (lignealias.length>2){
                         for(int i=0;i<lignealias.length;i++){
                     nomalias=lignealias[i].trim(); 
                     if(!nomalias.equals("")){
                     lesalias.get(lesalias.size()-1).getMembers().add(nomalias);
                     
                     
                     }  
                     }
                     }
                 
                 break;
             
             }
              
              
              
             if(ligne.contains("zone:")){
         String[] lignezone=ligne.split(":");
         
         
        if(lignezone[1].replaceAll("\\t", ";").split(";").length>2){
           String[] cas1=lignezone[1].replaceAll("\\t", ";").split(";");
                        

            zone=new Area(cas1[1]);
            zones.add(zone);
            for(int i=2;i<cas1.length;i++){
                nommembre=cas1[i].trim(); 
                     if(!nommembre.equals("")){
                     membre=new Member(nommembre);
                      //System.out.println(membre.getName());
                     zones.get(zones.size()-1).getMembers().add(membre);
                    
            }
            }
        }
            // System.out.println(lignezone[1].replaceAll("\\t", ";"));
             
            
         
        else{
         
                         nomzone=lignezone[1].trim();
                         zone=new Area(nomzone);
                         zones.add(zone);
                        // System.out.println(zones.get(zones.size()-1).getName());
                       //  zoneact=zone;
        }   
             }
             else{
                  String[] lignemembre=ligne.split(";");
                 
                   for(int i=0;i<lignemembre.length;i++){
                     nommembre=lignemembre[i].trim(); 
                     if(!nommembre.equals("")){
                     membre=new Member(nommembre);
                      //System.out.println(membre.getName());
                     zones.get(zones.size()-1).getMembers().add(membre);
                     }
                   }
                  
             }
             
         }
            
              
              
              while((ligne=br.readLine())!=null){
                  
                 if(ligne.contains("Effective configuration:")){
                     break;
                 }
            if(ligne.contains("alias:")){
              
                 
                  String[] lignealias=ligne.split(":");
                  //   System.out.println(lignealias.length);   
                  //String[] apresalias=lignealias[1].split("\t");   
                   if (lignealias.length>=3){
                         String reste=lignealias[1];
                         int taille=reste.length()-2;
                         String nom=reste.substring(0, taille).trim();
                         
                          for(int i=2;i<lignealias.length;i++){
                              reste +=":"+lignealias[i];
                          }
                          String adresse=reste.substring(taille).trim();
                                  
                         
                      
                         alias=new Alias(nom);
                        lesalias.add(alias);
                         
                     
                    
                     lesalias.get(lesalias.size()-1).getMembers().add(adresse);
                    //System.out.println(lesalias.get(lesalias.size()-1).getNom());
                         
                         
                        // System.out.println(lesalias.get(lesalias.size()-1).getMembers().get(0));
                  
                     
                     } else{
                          nomalias=lignealias[1].trim();
                         alias=new Alias(nomalias);
                        lesalias.add(alias);
                     }
                    
                                     
             }
             else{
                  String[] lignealias=ligne.split(";");
                 
                   for(int i=0;i<lignealias.length;i++){
                     nomalias=lignealias[i].trim(); 
                     if(!nomalias.equals("")){
                     lesalias.get(lesalias.size()-1).getMembers().add(nomalias);
                     
                     
                     }  
                  
                  
                  
                  
              }
              
          
         }
              }
              
              
              
              while((ligne=br.readLine())!=null){
                  if(ligne.isEmpty()){
                   
                   break;
                  }
               
              
              
              String[] lignezone=ligne.split(":");
               
                         nomzone=lignezone[1].trim();
              for(int i=0;i<zones.size();i++){
              if(zones.get(i).getName().equals(nomzone))
              { 
                zones.get(i).setStatut("Active");
                // System.out.println(zones.get(i).getStatut());
              }
              // System.out.println(zones.get(i).getName());
              }
              
                            }
              
         int maxmembre=0;
          
          for(int k=0;k<zones.size();k++){
               
             if (zones.get(k).getMembers().size()>maxmembre){
               
                  maxmembre=zones.get(k).getMembers().size();}
          }
          
         sortie2.write("Les noms des zones"+";");
          for(int i=1;i<=maxmembre;i++){
              sortie2.write("zone "+i+";");
          }
          
          sortie2.write("Statut;");
          sortie2.write("\r");
          
          for(int i=0;i<zones.size();i++){
                        //System.out.println(zones.get(i).getName());

                              sortie2.write(zones.get(i).getName()+";");
                              
                              
          for(int j=0;j<zones.get(i).getMembers().size();j++){
              sortie2.write(zones.get(i).getMembers().get(j).getName()+";");
              
          }
            for(int j=zones.get(i).getMembers().size();j<+maxmembre;j++){
              sortie2.write(" ;");
              
          }
          sortie2.write(zones.get(i).getStatut());
           sortie2.write("\r");
          }
              
              
              
              sortie3.write("Alias;Adresse"+"\r");
              for(int i=0;i<lesalias.size();i++){
                          
                   sortie3.write(lesalias.get(i).getNom()+";");
                  
                              
          for(int j=0;j<lesalias.get(i).getMembers().size();j++){
              sortie3.write(lesalias.get(i).getMembers().get(j)+";");
              
          }
          sortie3.write("\r");
          }
                         
         sortie.close();
         sortie2.close();
         sortie3.close();
         
         //2eme partie
         
         
         
         
         
         
       //  sortie2 = new FileWriter("C:\\Users\\DALI\\Desktop\\port.txt");
         //BufferedWriter out =new BufferedWriter(sortie2);
         
         FileWriter sort = new FileWriter(home+"\\port.csv");
         BufferedWriter out2 =new BufferedWriter(sort);
         
        boolean date=false;
         String[] detail,detail2;
         Port port=null;
         Info info=null;
         ArrayList<Port> ports=new ArrayList<Port>();
      
         while((ligne=br.readLine())!= null){
            
             if(ligne.isEmpty())
                 break;
         }
           while ((ligne=br.readLine())!= null){
              if (date){
                     break;
                 }
               
               if(ligne.contains("port:")){
         detail=ligne.split(":");
         
                  port=new Port(detail[1]);
                 
                 
                   ports.add(port);
            }   
    
            ligne=br.readLine();
             
             while ((ligne=br.readLine())!= null){
                 if (ligne.isEmpty()){
                     break;
                 }
                  if (ligne.contains("date")){
                     date=true;
             
                     break;
                 }
                 detail=ligne.split("\\t");
                 detail2=detail[0].split(":");
                 if(detail2.length>1){
                 
                     info=new Info(detail2[0].trim());
                     detail2=detail2[1].split("\\s");
                     
                     for(int i=0;i<detail2.length;i++){
                        info.getDetail().add(detail2[i].trim());
                     }
                
                port.getInfo().add(info);
                 }else{
                     if(detail.length==1)
                         System.out.println(detail[0]);
                     
                     detail2=detail[1].split("\\s");
                     info=new Info(detail[0].trim());
                     
                   // System.err.println(detail2[0]);
                       for(int i=0;i<detail2.length;i++){
                        info.getDetail().add(detail2[i].trim());
                     }
                      port.getInfo().add(info);
               
                 }
             }
             
                     
              
        }
                   
                    
                    this.date=ligne;
                 
                    
       /*    for(int i=0;i<ports.size();i++){
               out.write(ports.get(i).getNum());
               out.write("\r\n");
               out.flush();
               for(int j=0;j<ports.get(i).getInfo().size();j++){
                   out.write(ports.get(i).getInfo().get(j).getNom()+" ");
                   out.flush();
                   for(int k=0;k<ports.get(i).getInfo().get(j).getDetail().size();k++){
                       out.write(ports.get(i).getInfo().get(j).getDetail().get(k)+" ");
                   out.flush();
                   }
                   out.write("\r\n");
               }
           }
           */
              for(int i=0;i<ports.size();i++){
                 
                        out2.write("Attribut;");
                        for(int j=0;j<ports.get(i).getInfo().size();j++){
                            
                         out2.write(ports.get(i).getInfo().get(j).getNom()+";");
                     }
              
                       out2.write("\r\n");
               out2.write("Port: "+ports.get(i).getNum()+";");
              
               
               for(int j=0;j<ports.get(i).getInfo().size();j++){
                   
                   for(int k=0;k<ports.get(i).getInfo().get(j).getDetail().size();k++){
                       out2.write(ports.get(i).getInfo().get(j).getDetail().get(k)+" ");
                   out2.flush();
                   }
                   out2.write(";");
                   
               }
               out2.write("\r\n");
               out2.write(" ;");
               out2.write("\r\n");
               out2.flush();
           }
                  
                    
                    
           /*out2.write("Attribut;");
           
           for(int i=0;i<port.getInfo().size();i++){
               out2.write(port.getInfo().get(i).getNom()+";");
           }
           out2.write("\r\n");
           out2.flush();
            for(int i=0;i<ports.size();i++){
               out2.write(ports.get(i).getNum()+";");
              
               
               for(int j=0;j<ports.get(i).getInfo().size();j++){
                   
                   for(int k=0;k<ports.get(i).getInfo().get(j).getDetail().size();k++){
                       out2.write(ports.get(i).getInfo().get(j).getDetail().get(k)+" ");
                   out2.flush();
                   }
                   out2.write(";");
                   
               }
               out2.write("\r\n");
               out2.flush();
           }
           
         */
         
         
         
         
         //3eme partie
         
         try {
        
         // sortie2 = new FileWriter("C:\\Users\\DALI\\Desktop\\liste_port.txt");
        // BufferedWriter out =new BufferedWriter(sortie2);
        try( FileWriter sortie4 = new FileWriter(home+"\\debit.csv")){
          int j,deb=0;
         
         Port2 port2;
        
         String[] detailligne;
        
         String type="";
         
         ArrayList<Port2> lesport=new ArrayList<Port2>();
         String[] detailligne2=new String[16];
         
         //////////////////////////
          while ((ligne=br.readLine())!= null){
              if(ligne.contains("portPerfShow")){
                  detail=ligne.split("\\s");
                  this.pas=Integer.parseInt(detail[detail.length-1]);
                  
                  if(ligne.contains("tx"))
                      type="tx";
                  else if(ligne.contains("rx"))
                      type="rx";
                  if(ligne.contains("rx") && ligne.contains("tx")){
                    type="txrx";  
                  }
                  break;
              }
          }
         
        while ((ligne=br.readLine())!= null){
             
            
           //ligne=br.readLine();
           if(ligne.contains("exit")){
               break;
           }
           
            detailligne=ligne.split("\\s");
            trouver=false;
            
             for(int i=0;i<detailligne.length;i++){
                 if(!detailligne[i].equals("")){
                  if(detailligne[i].trim().equals("0")){
                      deb=0;
                  }
                     
                     
                 for(j=0;j<lesport.size();j++){
                   if(lesport.get(j).getNum().equals(detailligne[i])){
                      
                        trouver=true;
                        
                    }
                 
                    
                }
                if(trouver==false){
             port2=new Port2(detailligne[i].trim());
            lesport.add(port2);
            
           
             // out.write(detailligne[i]+"  ");
              //  out.flush();
              // System.out.println(lesport.get(lesport.size()-1).getNum());
                }
             }
             }
             
        
       
             ligne=br.readLine();
          
             ligne=br.readLine();
        
            detailligne=ligne.split("\\s");
             j=0;
             for(int i=0;i<detailligne.length;i++){
                 
                 if(!detailligne[i].equals("")){
              
             detailligne2[j]=detailligne[i];
             
                 j++;
                 }
             }
             
             
             
             if(type.equals("txrx")){

            
                for(int i=0;i<=(j-2);i=i+2){


                  port2=lesport.get(deb);
                  port2.getTx().add(detailligne2[i]);
                  port2.getRx().add(detailligne2[i+1]);
                   deb++; 
                 }
            
             }
             
             else if(type.equals("tx")){
                  for(int i=0;i<j;i++){


                  port2=lesport.get(deb);
                  port2.getTx().add(detailligne2[i]);
                 
                   deb++; 
                 }
             }
              else if(type.equals("rx")){
                 for(int i=0;i<j;i++){


                  port2=lesport.get(deb);
            
                  port2.getRx().add(detailligne2[i]);
                   deb++; 
                 }  
              }
              else if(type.equals("txrx")){
                 for(int i=0;i<j;i++){


                  port2=lesport.get(deb);
                  port2.getTx().add(detailligne2[i]);
                  
                   deb++; 
                 }  
              }
          ligne=br.readLine();   
       }
         
         /////////////////////
         sortie4.write("pas="+pas+"(s);");
        for(int i=1;i<=lesport.get(0).getTx().size();i++){
          sortie4.write(i+";") ; 
        }
         sortie4.write("\r");
        
     for(int i=0;i<lesport.size();i++){
            // System.err.println(lesport.get(i).getNum());
             
             if(!lesport.get(0).getTx().isEmpty()){
                 sortie4.write(lesport.get(i).getNum()+";");
             for(j=0;j<lesport.get(i).getTx().size();j++){
                 sortie4.write(lesport.get(i).getTx().get(j)+";");
             // System.out.println(lesport.get(i).getTx().get(j)+"**"+lesport.get(i).getRx().get(j));
             }
             sortie4.write("\r");
             }
              
              
               if(!lesport.get(i).getRx().isEmpty()){
                   sortie4.write(lesport.get(i).getNum()+";");
              for(j=0;j<lesport.get(i).getRx().size();j++){
                 sortie4.write(lesport.get(i).getRx().get(j)+";");
              }
             
               sortie4.write("\r");
               }
              
              
      }
     
     //modifier les valeur de débit
     Port3 port3;
    
     float val;
      for(int i=0;i<lesport.size();i++){
           
             port3=new Port3(lesport.get(i).getNum());
             
          for(j=0;j<lesport.get(i).getRx().size();j++){
             
               if(lesport.get(i).getRx().get(j).contains("m")){
                  chaine= lesport.get(i).getRx().get(j).substring(0, lesport.get(i).getRx().get(j).length()-1);
                  val=parseFloat(chaine)*1024;
                    port3.getRx().add(val);
              }else if(lesport.get(i).getRx().get(j).contains("k")){
                  chaine= lesport.get(i).getRx().get(j).substring(0, lesport.get(i).getRx().get(j).length()-1);
                  val=parseFloat(chaine);
                   port3.getRx().add(val);
              }
               else {
                
                   val=parseFloat(lesport.get(i).getRx().get(j))/1024;
                    port3.getRx().add(val);
               }
               
                 
               
                      }
          
          
        for(j=0;j<lesport.get(i).getTx().size();j++){
            
              if(lesport.get(i).getTx().get(j).contains("m")){
                  chaine= lesport.get(i).getTx().get(j).substring(0, lesport.get(i).getTx().get(j).length()-1);
                  val=parseFloat(chaine)*1024;
                 port3.getTx().add(val);
                  
              }else if(lesport.get(i).getTx().get(j).contains("k")){
                  chaine= lesport.get(i).getTx().get(j).substring(0, lesport.get(i).getTx().get(j).length()-1);
                  val=parseFloat(chaine);
                port3.getTx().add(val);
              }
               else {
                
                   val=parseFloat(lesport.get(i).getTx().get(j))/1024; 
                 port3.getTx().add(val);
                   
               }
               
        }  
        lesport3.add(port3);
      }
             
      }catch(Exception ex){System.err.println(ex);} 
       }catch(Exception ex){
           System.out.println(ex);
       }
         
         
         
         
         
         
         
    }catch(Exception ex){System.out.println(ex);}
    
}catch(Exception ex){System.out.println(ex);}
    
        
     
     return lesport3;   
    }
    
    
    void perf_Info( ArrayList<Port3> lesport3){
        double RXmin=0,TXmin=0,RXmax=0,TXmax=0,totRX=0,totTX=0,sommeRX,sommeTX;
        String msgRXmin="",msgTXmin="",msgRXmax="",msgTXmax="",msgtotRX="",msgtotTX="" , portRXmin="",portRXmax="",portTXmin="",portTXmax="";
          sommeRX=0;
            sommeTX=0;
           for(int j=0;j<lesport3.get(0).getRx().size();j++){
               sommeRX+=lesport3.get(0).getRx().get(j);
               sommeTX+=lesport3.get(0).getTx().get(j);
               
           }
           RXmin=sommeRX;
           TXmin=sommeTX;
        for(int i=1;i<lesport3.size();i++){
            sommeRX=0;
            sommeTX=0;
           for(int j=0;j<lesport3.get(i).getRx().size();j++){
               sommeRX+=lesport3.get(i).getRx().get(j);
               sommeTX+=lesport3.get(i).getTx().get(j);
               
           }
           
           totRX+=sommeRX;
           totTX+=sommeTX;
           if(sommeRX<RXmin){
               
               RXmin=sommeRX;
           }
            if(sommeTX<TXmin){
               
               TXmin=sommeTX;
            }
             if(sommeRX>=RXmax){
              
               RXmax=sommeRX;
             }
             if(sommeTX>=TXmax){
               
               TXmax=sommeTX;
             }
        }
        for(int i=0;i<lesport3.size();i++){
            sommeRX=0;
            sommeTX=0;
           for(int j=0;j<lesport3.get(i).getRx().size();j++){
               sommeRX+=lesport3.get(i).getRx().get(j);
               sommeTX+=lesport3.get(i).getTx().get(j);
               
           }
         
           
           if(sommeRX==RXmin){
               portRXmin+=lesport3.get(i).getNum()+",";
              
           }
           if(sommeRX==RXmax){
               portRXmax+=lesport3.get(i).getNum()+",";
             
           }
           if(sommeTX==TXmin){
               portTXmin+=lesport3.get(i).getNum()+",";
               
           }
           if(sommeTX==TXmax){
               portTXmax+=lesport3.get(i).getNum()+",";
              
           }
        }
         msgRXmin="min RX ="+RXmin+"(Ko) Port: "+portRXmin+" \n";
          msgTXmin="min TX ="+TXmin+"(Ko) Port: "+portTXmin+" \n";
           msgRXmax="max RX ="+RXmax+"(Ko) Port: "+portRXmax+" \n";
            msgTXmax="max TX ="+TXmax+"(Ko) Port: "+portTXmax+" \n";
         msgtotRX="RX total= "+totRX+"(Ko) \n";
         msgtotTX="TX total= "+totTX+"(Ko) \n";
        
        JOptionPane.showMessageDialog(null, msgRXmin+msgRXmax+msgTXmin+msgTXmax+msgtotRX+msgtotTX, "Performance", WIDTH);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new Accueil().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox RX;
    private javax.swing.JCheckBox TX;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
